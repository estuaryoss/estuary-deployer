dist: xenial
language: python
python: 3.6
script: skip
os: linux

env:
  NGROK_TOKEN: 1RER6BUC3QNNwYWY5LcIBjrv3A8_24QccmopTEQJGMErG9uzw

jobs:
  include:
    - stage: test
    #run unit tests for render
    - language: python
      python: 3.6
      env:
        TEMPLATES_DIR: inputs/templates
        VARS_DIR: inputs/variables
        SCRIPTS_DIR: tests
        ISOLATED: true
      before_install:
        - pip3 install -r requirements.txt
        - pip3 install coveralls
      before_script:
        - py.test tests/render_test.py --cov=rest/api/jinja2
      script:
        - python3 -m unittest discover tests "render_test.py"
      after_script:
        - coveralls

    #run executable tests - VM
    - language: python
      python: 3.6
      services: docker
      env:
        ISOLATED: true
        TEMPLATES_DIR: inputs/templates
        VARS_DIR: inputs/variables
        SCRIPTS_DIR: tests
        MAX_DEPLOYMENTS: 3
        NGROK_TOKEN: 1RER6BUC3QNNwYWY5LcIBjrv3A8_24QccmopTEQJGMErG9uzw
      before_script:
        - docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"
        - docker pull alpine:3.9.4
        - docker pull mysql:5.6
        - pip3 install -r requirements.txt
        - pyinstaller --onefile --clean --add-data="rest/api/views/swaggerui/*:rest/api/views/swaggerui/" main_flask.py
        - ls -lrt dist
        - cp dist/main_flask main-linux
        - chmod +x main-linux
        - sudo chown -R travis:travis inputs
        - ls -lrt
      script:
        - ./main-linux > /dev/null 2>&1 &
        #        - ./main-linux &
        #        - chmod +x ngrok.sh
        #        - ./ngrok.sh 8080 $NGROK_TOKEN
        #        - sleep 3600
        - PID="$!"
        - sleep 5
        #  - ./ngrok.sh
        #  - sleep 3600
        - python3 -m unittest discover $SCRIPTS_DIR/rest_docker "*_test.py"
        - python3 -m unittest discover tests/unit "*_test.py"
        - ls -lrt /tmp
        - ps -ef

#    #run docker tests - docker sock mount
#    - language: python
#      python: 3.6
#      services:
#        - docker
#      env:
#        MAX_DEPLOYMENTS: 3
#        SCRIPTS_DIR: tests
#        ISOLATED: true
#      before_script:
#        - docker pull alpine:3.9.4
#        - docker pull mysql:5.6
#        - docker build -t estuaryoss/deployer:latest .
#      script:
#        - docker network create estuarydeployer_default
#        - docker run -d
#          -e MAX_DEPLOYMENTS=$MAX_DEPLOYMENTS
#          -p 8080:8080
#          -v $PWD/inputs/templates:/scripts/inputs/templates
#          -v $PWD/inputs/variables:/scripts/inputs/variables
#          -v /var/run/docker.sock:/var/run/docker.sock
#          --net=estuarydeployer_default
#          --name estuary-deployer
#          estuaryoss/deployer:latest
#        - sleep 10
#        - python3 -m unittest discover $SCRIPTS_DIR/rest_docker "*_test.py"

    #run docker tests - docker sock mount CENTOS
    - language: python
      python: 3.6
      services:
        - docker
      env:
        TEST_ENV: centos
        MAX_DEPLOYMENTS: 3
        SCRIPTS_DIR: tests
        ISOLATED: true
      before_script:
        - docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"
        - pip3 install -r requirements.txt
        - pyinstaller --onefile --clean --add-data="rest/api/views/swaggerui/*:rest/api/views/swaggerui/" main_flask.py
        - ls -lrt dist
        - cp dist/main_flask main-linux
        - docker pull centos:8
        - docker pull mysql:5.6
        - docker pull alpine:3.9.4
        - docker build -t estuaryoss/deployer:latest -f Dockerfile .
      script:
        - docker network create estuarydeployer_default
        - docker run -d
          -e MAX_DEPLOYMENTS=$MAX_DEPLOYMENTS
          -p 8080:8080
          -v $PWD/inputs/templates:/scripts/inputs/templates
          -v $PWD/inputs/variables:/scripts/inputs/variables
          -v /var/run/docker.sock:/var/run/docker.sock
          --net=estuarydeployer_default
          --name estuary-deployer
          estuaryoss/deployer:latest
        - sleep 10
        - python3 -m unittest discover $SCRIPTS_DIR/rest_docker "*_test.py"

    #run executable tests - kubectl
    - language: python
      python: 3.6
      env:
        ISOLATED: true
        TEMPLATES_DIR: inputs/templates
        VARS_DIR: inputs/variables
        SCRIPTS_DIR: tests
      before_script:
        - docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"
        - docker pull alpine:3.10.2
        - pip3 install -r requirements.txt
        - pyinstaller --onefile --clean --add-data="rest/api/views/swaggerui/*:rest/api/views/swaggerui/" main_flask.py
        - ls -lrt dist
        - cp dist/main_flask main-linux
        - chmod +x main-linux
        - sudo chown -R travis:travis inputs
        - ls -lrt
        - curl -Lo kind https://github.com/kubernetes-sigs/kind/releases/download/v0.10.0/kind-linux-amd64 && chmod +x kind && sudo mv kind /usr/local/bin/
        - kind create cluster
        - curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      script:
        - ./main-linux > /dev/null 2>&1 &
        #        - ./main-linux &
        #        - chmod +x ngrok.sh
        #        - ./ngrok.sh 8080 $NGROK_TOKEN
        #        - sleep 3600
        - PID="$!"
        - sleep 5
        - python3 -m unittest discover tests/rest_kubectl "flask_rest_test.py"
        - python3 -m unittest discover tests/rest_kubectl "k8s_integration_test.py"
        - ls -lrt /tmp
        - ps -ef

    #run agent integration tests
    - language: python
      python: 3.6
      services:
        - docker
      env:
        SCRIPTS_DIR: tests
        ISOLATED: true
      before_script:
        - docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"
        - docker pull alpine:3.9.4
        - docker pull mysql:5.6
        - docker pull estuaryoss/agent-go:latest
        - docker pull estuaryoss/netflix-eureka:1.10.5
        - pyinstaller --onefile --clean --add-data="rest/api/views/swaggerui/*:rest/api/views/swaggerui/" main_flask.py
        - docker build -t estuaryoss/deployer:latest .
      script:
        - docker network create estuarydeployer_default
        - docker run -d
          -p 8081:8080 estuaryoss/netflix-eureka:1.10.5
        - IP_ADDR_STRING=$(hostname -I)
        - IP_ADDR_ARRAY=($IP_ADDR_STRING)
        - EUREKA_SERVER_LOCAL=http://${IP_ADDR_ARRAY[0]}:8081/eureka/v2
        - echo "EUREKA_SERVER=$EUREKA_SERVER_LOCAL" >> .env
        - echo "APP_IP_PORT=${IP_ADDR_ARRAY[0]}:8080" >> .env
        - echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME" >> .env
        - echo "DOCKERHUB_TOKEN=$DOCKERHUB_TOKEN" >> .env
        - cat .env
        - sleep 30
        - docker run -d
          -p 8080:8080
          -v $PWD/inputs/templates:/scripts/inputs/templates
          -v $PWD/inputs/variables:/scripts/inputs/variables
          -v /var/run/docker.sock:/var/run/docker.sock
          --net=estuarydeployer_default
          --name estuary-deployer
          --env-file .env
          estuaryoss/deployer:latest

        #- docker network ls
        #- echo "Deployer net is $(docker network ls | grep deployer | awk '{print $2}' | head -1)"
        - sleep 10
        - docker ps -a
        - python3 -m unittest discover $SCRIPTS_DIR/rest_agent_integration "*_test.py"
        - docker ps -a
        #- ./ngrok.sh 8080 $NGROK_TOKEN
        #- docker logs -f estuary-deployer
        #- docker logs $(docker ps -a | grep agent | awk '{print $13}')

    #run discovery integration tests
    - language: python
      python: 3.6
      services:
        - docker
      env:
        SCRIPTS_DIR: tests
        ISOLATED: true
      before_script:
        - docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"
        - docker pull alpine:3.9.4
        - docker pull mysql:5.6
        - docker pull estuaryoss/agent:latest
        - docker pull estuaryoss/discovery:latest
        - docker pull estuaryoss/netflix-eureka:1.10.5
        - pyinstaller --onefile --clean --add-data="rest/api/views/swaggerui/*:rest/api/views/swaggerui/" main_flask.py
        - docker build -t estuaryoss/deployer:latest .
      script:
        - docker network create estuarydeployer_default
        - docker run -d
          -p 8081:8080 estuaryoss/netflix-eureka:1.10.5
        - IP_ADDR_STRING=$(hostname -I)
        - IP_ADDR_ARRAY=($IP_ADDR_STRING)
        - EUREKA_SERVER_LOCAL=http://${IP_ADDR_ARRAY[0]}:8081/eureka/v2
        - echo "EUREKA_SERVER=$EUREKA_SERVER_LOCAL" >> .env
        - echo "APP_IP_PORT=${IP_ADDR_ARRAY[0]}:8080" >> .env
        - echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME" >> .env
        - echo "DOCKERHUB_TOKEN=$DOCKERHUB_TOKEN" >> .env
        - cat .env
        - sleep 30
        - docker run -d
          -p 8080:8080
          -v $PWD/inputs/templates:/scripts/inputs/templates
          -v $PWD/inputs/variables:/scripts/inputs/variables
          -v /var/run/docker.sock:/var/run/docker.sock
          --net=estuarydeployer_default
          --name estuary-deployer
          --env-file .env
          estuaryoss/deployer:latest

        #- docker network ls
        #- echo "Deployer net is $(docker network ls | grep deployer | awk '{print $2}' | head -1)"
        - sleep 10
        - docker ps -a
        - python3 -m unittest discover $SCRIPTS_DIR/rest_discovery_integration "*_test.py"
        - docker ps -a
        #- ./ngrok.sh 8080 $NGROK_TOKEN
        #- docker logs -f estuary-deployer
        #- docker logs $(docker ps -a | grep agent | awk '{print $13}')

    #run kubectl tests - in docker container
    - language: python
      python: 3.6
      services:
        - docker
      env:
        ISOLATED: true
        MAX_DEPLOYMENTS: 3
        SCRIPTS_DIR: tests
      before_script:
        - docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"
        - pyinstaller --onefile --clean --add-data="rest/api/views/swaggerui/*:rest/api/views/swaggerui/" main_flask.py
        - docker build -t estuaryoss/deployer:latest .
      script:
        - docker network create estuarydeployer_default
        - docker run -d
          -e MAX_DEPLOYMENTS=$MAX_DEPLOYMENTS
          -p 8080:8080
          -v $PWD/inputs/templates:/scripts/inputs/templates
          -v $PWD/inputs/variables:/scripts/inputs/variables
          -v /var/run/docker.sock:/var/run/docker.sock
          --net=estuarydeployer_default
          --name estuary-deployer
          estuaryoss/deployer:latest
        - sleep 10
        - python3 -m unittest discover $SCRIPTS_DIR/rest_kubectl "flask_rest_test.py"

        #run schedulers, eureka tests and others
    - language: python
      python: 3.6
      services:
        - docker
      env:
        SCRIPTS_DIR: tests
        DOCKER_SCRIPTS_DIR: /scripts
        ISOLATED: true
        APP_APPEND_LABEL: LAB_2GB_RAM
      before_script:
        - docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"
        - docker pull alpine:3.9.4
        - pyinstaller --onefile --clean --add-data="rest/api/views/swaggerui/*:rest/api/views/swaggerui/" main_flask.py
        - docker build -t estuaryoss/deployer:latest .
      script:
        - docker network create estuarydeployer_default
        - docker run -d
          -p 8080:8080
          -v $PWD/inputs/templates:/scripts/inputs/templates
          -v $PWD/inputs/variables:/scripts/inputs/variables
          --net=estuarydeployer_default
          --name estuary-deployer
          estuaryoss/deployer:latest
        - sleep 5
        - python3 -m unittest discover $SCRIPTS_DIR/rest_docker_sock "*_test.py"
        - docker stop $(docker ps -a -q)
        - docker rm $(docker ps -a -q)
        - docker network prune -f

        #run eureka registration tests
        - docker-compose up -d
        - sleep 30
        - docker ps
        - python3 -m unittest discover $SCRIPTS_DIR/rest_eureka "*_test.py"
        - docker-compose down -v

        # run env_expire scheduler
        - docker-compose up -d
        - sleep 30
        - docker ps
        - python3 -m unittest discover $SCRIPTS_DIR/env_expire_scheduler "*_test.py"

    - stage: deploy
      services: docker
      before_deploy:
        - pip3 install -r requirements.txt
        - pyinstaller --onefile --clean --add-data="rest/api/views/swaggerui/*:rest/api/views/swaggerui/" main_flask.py
        - ls -lrt dist
        - cp dist/main_flask main-linux
        - ls -lrt
        - rm -rf dist
        - rm -rf build
        - chmod +x *.sh
      deploy:
        - provider: script
          script: bash docker_push_tag.sh
          skip_cleanup: true
          on:
            tags: true

        - provider: script
          script: bash docker_push_master.sh
          skip_cleanup: true
          on:
            branch: master

        - provider: releases
          token: $GITHUB_TOKEN
          file:
            - "main-linux"
          skip_cleanup: true
          on:
            tags: true