"swagger": '2.0'
info:
  description: |
    This is estuary-deployer with Kubectl.
  version: "3.0.0"
  title: estuary-deployer
  termsOfService: http://swagger.io/terms/
  contact:
    email: constantin.dinuta@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# host: localhost:8080
basePath: /kubectl/
tags:
  - name: estuary-deployer
    description: Estuary-deployer service which deploys using kubernetes templates
    externalDocs:
      description: Find out more on github
      url: https://github.com/dinuta/estuary-deployer
schemes:
  - http
paths:
  /env:
    get:
      tags:
        - estuary-deployer
      summary: Print env vars
      produces:
        - application/json
      responses:
        200:
          description: List of env vars in key value pairs
  /ping:
    get:
      tags:
        - estuary-deployer
      summary: Ping endpoint which replies with pong
      produces:
        - application/json
      responses:
        200:
          description: Ping endpoint which replies with pong. Useful for situations where checking the alive status of
            the service is needed.
  /about:
    get:
      tags:
        - estuary-deployer
      summary: Information about the application.
      produces:
        - application/json
      responses:
        200:
          description: Prints the name, version of the estuary-deployer application.
  /rend/{template}/{variables}:
    get:
      tags:
        - estuary-deployer
      summary: estuary-deployer render wo env vars
      description: Gets the rendered output from template and variable files with estuary-deployer
      produces:
        - application/json
      parameters:
        - name: template
          in: path
          description: The template file mounted in docker
          required: true
          type: string
        - name: variables
          in: path
          description: The variables file mounted in docker
          required: true
          type: string
      responses:
        200:
          description: estuary-deployer rendered template with jinja2
        404:
          description: estuary-deployer failure to rend the template
  /rendwithenv/{template}/{variables}:
    post:
      tags:
        - estuary-deployer
      summary: estuary-deployer render with inserted env vars
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: template
          in: path
          description: Template file mounted in docker
          required: true
          type: string
        - name: variables
          in: path
          description: Variables file mounted in docker
          required: true
          type: string
        - name: EnvVars
          in: body
          description: List of env vars by key-value pair
          required: false
          schema:
            $ref: '#/definitions/envvar'
      responses:
        200:
          description: estuary-deployer rendered template with jinja2
        404:
          description: estuary-deployer failure to rend the template
  /getenv/{env_name}:
    get:
      tags:
        - estuary-deployer
      summary: Gets the environment variable value from the estuary-deployer container
      produces:
        - application/json
      parameters:
        - name: env_name
          in: path
          description: The name of the env var wanted
          required: true
          type: string
      responses:
        200:
          description: Get env var success
        404:
          description: Get env var failure
  /deploystart:
    post:
      tags:
        - estuary-deployer
      summary: starts the kubernetes template
      consumes:
        - text/plain
      produces:
        - application/json
      parameters:
        - name: kubernetes template
          in: body
          description: 'version:'
          required: true
          schema:
            $ref: '#/definitions/template'
      responses:
        200:
          description: deploy success
        404:
          description: deploy failure
  /deploystartenv/{template}/{variables}:
    post:
      tags:
        - estuary-deployer
      summary: starts the kubernetes template with the template and the variables from the container
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: template
          in: path
          description: Template file mounted in docker
          required: true
          type: string
        - name: variables
          in: path
          description: Variables file mounted in docker
          required: true
          type: string
        - name: EnvVars
          in: body
          description: List of env vars by key-value pair
          required: false
          schema:
            $ref: '#/definitions/envvar'
      responses:
        200:
          description: deploy success
        404:
          description: deploy failure
  /deploystart/{template}/{variables}:
    get:
      tags:
        - estuary-deployer
      summary: starts the kubernetes template with the template and the variables from the container
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: template
          in: path
          description: Template file mounted in docker
          required: true
          type: string
        - name: variables
          in: path
          description: Variables file mounted in docker
          required: true
          type: string
      responses:
        200:
          description: deploy success
        404:
          description: deploy failure
  /deploystatus/{deployment_name}:
    get:
      tags:
        - estuary-deployer
      summary: gets the deployment status for a specific kubernetes deployment
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: deployment_name
          in: path
          description: kubernetes deployment id returned by the deploystart action.
          required: true
          type: string
      responses:
        200:
          description: get deploy status success
        404:
          description: get deploy status failure
  /getdeploymentinfo:
    get:
      tags:
        - estuary-deployer
      summary: gets the active deployments from the deployer service.
      produces:
        - application/json
      responses:
        200:
          description: get active deployments success.
        404:
          description: get active deployments failure
  /deploylogs/{deployment_name}:
    get:
      tags:
        - estuary-deployer
      summary: gets the logs for the kubernetes deployment specified by deployment_name
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: deployment_name
          in: path
          description: kubernetes deployment id returned by the deploystart action.
          required: true
          type: string
      responses:
        200:
          description: get compose environment logs success
        404:
          description: get compose environment logs failure
  /deploystop/{deployment_name}:
    get:
      tags:
        - estuary-deployer
      summary: stops the kubernetes deployment after it was deployed with name deployment_name
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: deployment_name
          in: path
          description: kubernetes deployment id returned by the deploystart action.
          required: true
          type: string
      responses:
        200:
          description: deploy stop success
        404:
          description: deploy stop failure
  /getdeployerfile:
    post:
      tags:
        - estuary-deployer
      summary: gets a file content from the estuary-deployer service
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: file
          in: body
          description: File path on the disk
          required: false
          schema:
            $ref: '#/definitions/file'
      responses:
        200:
          description: get file content success
        404:
          description: get file content failure
  /uploadfile:
    post:
      tags:
        - estuary-deployer
      summary: Uploads a file no mater the format. Binary or raw
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: content
          in: body
          description: The content of the file
          required: true
          schema:
            $ref: '#/definitions/filecontent'
        - in: header
          name: File-Path
          type: string
          required: true
      responses:
        200:
          description: The content of the file was uploaded successfully
        404:
          description: Failure, the file content could not be uploaded
  /executecommand:
    post:
      tags:
        - estuary-deployer
      summary: Executes a command in blocking mode. If your command is not executing in less than few seconds, the api will timeout.
      produces:
        - application/json
      parameters:
        - name: command
          in: body
          description: The command to be executed on remote service.
          required: true
          schema:
            $ref: '#/definitions/command'
      responses:
        200:
          description: command execution success
        404:
          description: command execution failure
definitions:
    file:
      type: object
      properties:
        file:
          type: "string"
      example: |
           {"file":"/etc/hostname"}
    folder:
      type: object
      properties:
        folder:
          type: "string"
      example: |
           {"folder":"/tmp"}
    command:
      type: string
      example: ls -lrt
    envvar:
      type: object
      example: |
          {"DATABASE" : "mysql56", "IMAGE":"latest"}
    filecontent:
      type: object
      example: {"file": "/home/automation/config.properties", "content": "ip=10.0.0.1\nrequest_sec=100\nthreads=10\ntype=dual"}
    template:
      type: string
      minLength: 3
      example: |
          version: '2.2'
          services:
            alpine:
              restart: always
              image: alpine:3.9.4
              hostname: alpine
              entrypoint: tail -f /etc/hostname
externalDocs:
  description: Find out more on github
  url: https://github.com/dinuta/estuary-deployer